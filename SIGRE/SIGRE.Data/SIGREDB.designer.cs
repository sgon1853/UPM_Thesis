#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIGRE.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SIGRE")]
	public partial class SIGREDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertReparation(Reparation instance);
    partial void UpdateReparation(Reparation instance);
    partial void DeleteReparation(Reparation instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    #endregion
		
		public SIGREDBDataContext() : 
				base(global::SIGRE.Data.Properties.Settings.Default.SIGREConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SIGREDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIGREDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIGREDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SIGREDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Reparation> Reparations
		{
			get
			{
				return this.GetTable<Reparation>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
	}
	
	[Table(Name="dbo.Reparation")]
	public partial class Reparation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdReparation;
		
		private string _IdCustomer;
		
		private System.DateTime _DateReparation;
		
		private string _CommentsReparation;
		
		private decimal _ValueReparation;
		
		private string _RepairmanName;
		
		private string _IdInvoice;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdReparationChanging(string value);
    partial void OnIdReparationChanged();
    partial void OnIdCustomerChanging(string value);
    partial void OnIdCustomerChanged();
    partial void OnDateReparationChanging(System.DateTime value);
    partial void OnDateReparationChanged();
    partial void OnCommentsReparationChanging(string value);
    partial void OnCommentsReparationChanged();
    partial void OnValueReparationChanging(decimal value);
    partial void OnValueReparationChanged();
    partial void OnRepairmanNameChanging(string value);
    partial void OnRepairmanNameChanged();
    partial void OnIdInvoiceChanging(string value);
    partial void OnIdInvoiceChanged();
    #endregion
		
		public Reparation()
		{
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[Column(Storage="_IdReparation", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdReparation
		{
			get
			{
				return this._IdReparation;
			}
			set
			{
				if ((this._IdReparation != value))
				{
					this.OnIdReparationChanging(value);
					this.SendPropertyChanging();
					this._IdReparation = value;
					this.SendPropertyChanged("IdReparation");
					this.OnIdReparationChanged();
				}
			}
		}
		
		[Column(Storage="_IdCustomer", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_DateReparation", DbType="DateTime NOT NULL")]
		public System.DateTime DateReparation
		{
			get
			{
				return this._DateReparation;
			}
			set
			{
				if ((this._DateReparation != value))
				{
					this.OnDateReparationChanging(value);
					this.SendPropertyChanging();
					this._DateReparation = value;
					this.SendPropertyChanged("DateReparation");
					this.OnDateReparationChanged();
				}
			}
		}
		
		[Column(Storage="_CommentsReparation", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string CommentsReparation
		{
			get
			{
				return this._CommentsReparation;
			}
			set
			{
				if ((this._CommentsReparation != value))
				{
					this.OnCommentsReparationChanging(value);
					this.SendPropertyChanging();
					this._CommentsReparation = value;
					this.SendPropertyChanged("CommentsReparation");
					this.OnCommentsReparationChanged();
				}
			}
		}
		
		[Column(Storage="_ValueReparation", DbType="Money NOT NULL")]
		public decimal ValueReparation
		{
			get
			{
				return this._ValueReparation;
			}
			set
			{
				if ((this._ValueReparation != value))
				{
					this.OnValueReparationChanging(value);
					this.SendPropertyChanging();
					this._ValueReparation = value;
					this.SendPropertyChanged("ValueReparation");
					this.OnValueReparationChanged();
				}
			}
		}
		
		[Column(Storage="_RepairmanName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RepairmanName
		{
			get
			{
				return this._RepairmanName;
			}
			set
			{
				if ((this._RepairmanName != value))
				{
					this.OnRepairmanNameChanging(value);
					this.SendPropertyChanging();
					this._RepairmanName = value;
					this.SendPropertyChanged("RepairmanName");
					this.OnRepairmanNameChanged();
				}
			}
		}
		
		[Column(Storage="_IdInvoice", DbType="VarChar(100)")]
		public string IdInvoice
		{
			get
			{
				return this._IdInvoice;
			}
			set
			{
				if ((this._IdInvoice != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdInvoiceChanging(value);
					this.SendPropertyChanging();
					this._IdInvoice = value;
					this.SendPropertyChanged("IdInvoice");
					this.OnIdInvoiceChanged();
				}
			}
		}
		
		[Association(Name="Invoice_Reparation", Storage="_Invoice", ThisKey="IdInvoice", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Reparations.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Reparations.Add(this);
						this._IdInvoice = value.IdInvoice;
					}
					else
					{
						this._IdInvoice = default(string);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdInvoice;
		
		private System.DateTime _InvoiceDate;
		
		private string _IdCustomer;
		
		private decimal _InvoiceValue;
		
		private EntitySet<Reparation> _Reparations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdInvoiceChanging(string value);
    partial void OnIdInvoiceChanged();
    partial void OnInvoiceDateChanging(System.DateTime value);
    partial void OnInvoiceDateChanged();
    partial void OnIdCustomerChanging(string value);
    partial void OnIdCustomerChanged();
    partial void OnInvoiceValueChanging(decimal value);
    partial void OnInvoiceValueChanged();
    #endregion
		
		public Invoice()
		{
			this._Reparations = new EntitySet<Reparation>(new Action<Reparation>(this.attach_Reparations), new Action<Reparation>(this.detach_Reparations));
			OnCreated();
		}
		
		[Column(Storage="_IdInvoice", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdInvoice
		{
			get
			{
				return this._IdInvoice;
			}
			set
			{
				if ((this._IdInvoice != value))
				{
					this.OnIdInvoiceChanging(value);
					this.SendPropertyChanging();
					this._IdInvoice = value;
					this.SendPropertyChanged("IdInvoice");
					this.OnIdInvoiceChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceDate", DbType="DateTime NOT NULL")]
		public System.DateTime InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[Column(Storage="_IdCustomer", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceValue", DbType="Money NOT NULL")]
		public decimal InvoiceValue
		{
			get
			{
				return this._InvoiceValue;
			}
			set
			{
				if ((this._InvoiceValue != value))
				{
					this.OnInvoiceValueChanging(value);
					this.SendPropertyChanging();
					this._InvoiceValue = value;
					this.SendPropertyChanged("InvoiceValue");
					this.OnInvoiceValueChanged();
				}
			}
		}
		
		[Association(Name="Invoice_Reparation", Storage="_Reparations", OtherKey="IdInvoice")]
		public EntitySet<Reparation> Reparations
		{
			get
			{
				return this._Reparations;
			}
			set
			{
				this._Reparations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reparations(Reparation entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Reparations(Reparation entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[Table(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IdCustomer;
		
		private string _Name;
		
		private string _LastName;
		
		private string _Address;
		
		private string _City;
		
		private string _PostalCode;
		
		private string _PhoneNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCustomerChanging(string value);
    partial void OnIdCustomerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Customer()
		{
			OnCreated();
		}
		
		[Column(Storage="_IdCustomer", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
